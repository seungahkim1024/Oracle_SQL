-- SOCCER_SQL_011
-- 팀과 스타디움을 조인하여
-- 팀이름, 스타디움 이름 출력
SELECT TEAM_NAME 팀명, STADIUM_NAME 스타디움
FROM TEAM T
    JOIN STADIUM S
    ON T.STADIUM_ID LIKE S.STADIUM_ID
ORDER BY TEAM_NAME;
    
-- SOCCER_SQL_012
-- 팀과 스타디움, 스케줄을 조인하여
-- 2012년 3월 17일에 열린 각 경기의 
-- 팀이름, 스타디움, 어웨이팀 이름 출력
-- 다중테이블 join 을 찾아서 해결하시오.
SELECT T.TEAM_NAME 팀명, S.STADIUM_NAME 스타디움, AWAYTEAM_ID 원정팀ID,
   SCH.SCHE_DATE 스케줄날짜
FROM STADIUM S
    JOIN TEAM T
    ON S.STADIUM_ID LIKE T.STADIUM_ID
    JOIN SCHEDULE SCH
    ON SCH.STADIUM_ID LIKE S.STADIUM_ID
WHERE SCHE_DATE LIKE '20120317'
ORDER BY T.TEAM_NAME;

-- SOCCER_SQL_013
-- 2012년 3월 17일 경기에 
-- 포항 스틸러스 소속 골키퍼(GK)
-- 선수, 포지션,팀명 (연고지포함), 
-- 스타디움, 경기날짜를 구하시오
-- 연고지와 팀이름은 간격을 띄우시오
SELECT PLAYER_NAME 선수명, POSITION 포지션, CONCAT('포항 ',TEAM_NAME) "팀명",
       (SELECT STADIUM_NAME
        FROM STADIUM
        WHERE STADIUM_NAME LIKE '포항스틸야드') 스타디움, 
        SCHE_DATE 스케줄날짜
FROM TEAM T
    JOIN PLAYER P
    ON T.TEAM_ID LIKE P.TEAM_ID
    JOIN STADIUM S
    ON S.STADIUM_ID = T.STADIUM_ID
    JOIN SCHEDULE SCH
    ON SCH.STADIUM_ID = T.STADIUM_ID
WHERE SCHE_DATE LIKE '20120317' AND POSITION LIKE 'GK'
    AND TEAM_NAME LIKE '스틸러스'
ORDER BY PLAYER_NAME;

-- SOCCER_SQL_014
-- 홈팀이 3점이상 차이로 승리한 경기의 
-- 경기장 이름, 경기 일정
-- 홈팀 이름과 원정팀 이름을
-- 구하시오
SELECT STADIUM_NAME 스타디움, SCHE_DATE 경기날짜,
     REGION_NAME||' '||TEAM_NAME 홈팀,
     (SELECT REGION_NAME||' '||TEAM_NAME
     FROM TEAM
     WHERE TEAM_ID LIKE AWAYTEAM_ID) 원정팀,
     HOME_SCORE "홈팀 점수", AWAY_SCORE "원정팀 점수"
FROM STADIUM S
    JOIN SCHEDULE C
    ON C.STADIUM_ID = S.STADIUM_ID
    JOIN TEAM T
    ON T.STADIUM_ID = S.STADIUM_ID
WHERE HOME_SCORE >= AWAY_SCORE +3;

-- SOCCER_SQL_015
-- STADIUM 에 등록된 운동장 중에서
-- 홈팀이 없는 경기장까지 전부 나오도록
-- 카운트 값은 20
SELECT STADIUM_NAME, S.STADIUM_ID, SEAT_COUNT, HOMETEAM_ID, E_TEAM_NAME
FROM STADIUM S
    LEFT JOIN TEAM T
    ON T.STADIUM_ID = S.STADIUM_ID;
    
SELECT STADIUM_NAME, STADIUM_ID, SEAT_COUNT, HOMETEAM_ID, 
    (SELECT E_TEAM_NAME
     FROM TEAM
     WHERE TEAM.STADIUM_ID LIKE STADIUM.STADIUM_ID) E_TEAM_NAME
FROM STADIUM;

-- SOCCER_SQL_016
-- 평균키가 유나이티드팀의 평균키 보다 작은 팀의 
-- 팀ID, 팀명, 평균키 추출
-- 1단계
SELECT *
FROM TEAM T
    JOIN PLAYER P
        ON T.TEAM_ID LIKE P.TEAM_ID;
-- 2단계
SELECT T.TEAM_ID 팀ID, T.TEAM_NAME 팀명, AVG(HEIGHT)평균키
FROM TEAM T
    JOIN PLAYER P
        ON T.TEAM_ID LIKE P.TEAM_ID
GROUP BY T.TEAM_ID, T.TEAM_NAME;
-- 3단계
SELECT T.TEAM_ID 팀ID, T.TEAM_NAME 팀명, AVG(HEIGHT)평균키
FROM TEAM T
    JOIN PLAYER P
        ON T.TEAM_ID LIKE P.TEAM_ID
GROUP BY T.TEAM_ID, T.TEAM_NAME
HAVING AVG(HEIGHT) >180; --180은 임의값
-- 4단계
SELECT T.TEAM_ID 팀ID, T.TEAM_NAME 팀명, ROUND(AVG(HEIGHT),2)평균키
FROM TEAM T
    JOIN PLAYER P
        ON T.TEAM_ID LIKE P.TEAM_ID
GROUP BY T.TEAM_ID, T.TEAM_NAME
HAVING AVG(HEIGHT) <(SELECT AVG(HEIGHT)
                     FROM TEAM T
                        JOIN PLAYER P
                            ON P.TEAM_ID LIKE T.TEAM_ID
                     WHERE TEAM_NAME LIKE '유나이티드')
ORDER BY 평균키;

-- SOCCER_SQL_017
-- 포지션이 MF 인 선수들의  소속팀명 및 선수명, 백넘버 출력
SELECT TEAM_NAME 팀명, PLAYER_NAME 선수명, BACK_NO 백넘버
FROM PLAYER P
    JOIN TEAM T
    ON P.TEAM_ID LIKE T.TEAM_ID
WHERE POSITION LIKE 'MF'
ORDER BY PLAYER_NAME;

-- SOCCER_SQL_018
-- 가장 키큰 선수 5 추출, 오라클, 단 키 값이 없으면 제외
SELECT A.* 
FROM (SELECT PLAYER_NAME 선수명, BACK_NO 백넘버, POSITION 포지션, HEIGHT 키
      FROM PLAYER
      WHERE HEIGHT IS NOT NULL
      ORDER BY HEIGHT DESC) A
WHERE ROWNUM BETWEEN 1 AND 5;

-- SOCCER_SQL_019
-- 선수 자신이 속한 팀의 평균키보다 작은 선수 정보 출력
SELECT TEAM_NAME 팀명, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM TEAM T
    JOIN PLAYER P
        ON T.TEAM_ID LIKE P.TEAM_ID
WHERE P.HEIGHT < (SELECT AVG(p2.HEIGHT)
                  FROM PLAYER p2
                  WHERE T.TEAM_ID like p2.TEAM_ID);






-----------------------------------------------------------------
CREATE TABLE DEPT
        (DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,
         DNAME VARCHAR2(14),
     LOC   VARCHAR2(13) ) ;
CREATE TABLE EMP
        (EMPNO NUMBER(4) CONSTRAINT PK_EMP PRIMARY KEY,
     ENAME VARCHAR2(10),
      JOB   VARCHAR2(9),
     MGR   NUMBER(4),
     HIREDATE DATE,
     SAL   NUMBER(7,2),
     COMM  NUMBER(7,2),
     DEPTNO NUMBER(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT);
rem  insert DEPT 4 data
INSERT INTO DEPT VALUES (10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES (30,'SALES','CHICAGO');
INSERT INTO DEPT VALUES (40,'OPERATIONS','BOSTON');
rem  insert EMP  14 data
INSERT INTO EMP  VALUES (7369,'SMITH','CLERK',    7902,to_date('17-12-1980','dd-mm-yyyy'), 800,NULL,20);
INSERT INTO EMP  VALUES (7499,'ALLEN','SALESMAN', 7698,to_date('20-2-1981', 'dd-mm-yyyy'),1600,300, 30);
INSERT INTO EMP  VALUES (7521,'WARD','SALESMAN',  7698,to_date('22-2-1981', 'dd-mm-yyyy'),1250,500, 30);
INSERT INTO EMP  VALUES (7566,'JONES','MANAGER',  7839,to_date('2-4-1981',  'dd-mm-yyyy'),2975,NULL,20);
INSERT INTO EMP  VALUES (7654,'MARTIN','SALESMAN',7698,to_date('28-9-1981', 'dd-mm-yyyy'),1250,1400,30);
INSERT INTO EMP  VALUES (7698,'BLAKE','MANAGER',  7839,to_date('1-5-1981',  'dd-mm-yyyy'),2850,NULL,30);
INSERT INTO EMP  VALUES (7782,'CLARK','MANAGER',  7839,to_date('9-6-1981',  'dd-mm-yyyy'),2450,NULL,10);
INSERT INTO EMP  VALUES (7788,'SCOTT','ANALYST',  7566,to_date('13-07-1987','dd-mm-yyyy'),3000,NULL,20);
INSERT INTO EMP  VALUES (7839,'KING','PRESIDENT', NULL,to_date('17-11-1981','dd-mm-yyyy'),5000,NULL,10);
INSERT INTO EMP  VALUES (7844,'TURNER','SALESMAN',7698,to_date('8-9-1981',  'dd-mm-yyyy'),1500,0,   30);
INSERT INTO EMP  VALUES (7876,'ADAMS','CLERK',    7788,to_date('13-07-1987','dd-mm-yyyy'),1100,NULL,20);
INSERT INTO EMP  VALUES (7900,'JAMES','CLERK',    7698,to_date('3-12-1981', 'dd-mm-yyyy'), 950,NULL,30);
INSERT INTO EMP  VALUES (7902,'FORD','ANALYST',   7566,to_date('3-12-1981', 'dd-mm-yyyy'),3000,NULL,20);
INSERT INTO EMP  VALUES (7934,'MILLER','CLERK',   7782,to_date('23-1-1982', 'dd-mm-yyyy'),1300,NULL,10);
COMMIT;